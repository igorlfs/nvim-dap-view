import{f as r,a as h}from"./BOSS2eSP.js";import"./BpA-tlIA.js";import{s as e,f as w}from"./CCWUXxDr.js";import{h as s}from"./BWvQED8v.js";import{l as u,s as f}from"./CqfYOgax.js";import{M as m}from"./CbZ5B8ld.js";const t={title:"FAQ"},{title:A}=t;var y=r(`<h2 id="why-add-nvim-dap-view-as-a-dependency-for-nvim-dap"><a href="#why-add-nvim-dap-view-as-a-dependency-for-nvim-dap">Why add <code>nvim-dap-view</code> as a dependency for <code>nvim-dap</code>?</a></h2> <p>By default, when launching a new session, <code>nvim-dap</code>’s terminal window takes half the screen. As a saner default, <code>nvim-dap-view</code> hijacks the terminal window (even if not invoked), making the split take only 12 lines (a setting which is of course, configurable). See <a href="https://github.com/rcarriga/nvim-dap-ui/issues/407" rel="nofollow">this</a> related issue (from <code>nvim-dap-ui</code>). Of course, this workaround only works if <code>nvim-dap-view</code> is loaded when a session starts.</p> <!> <h2 id="dapviewwatch-isnt-adding-the-whole-variable"><a href="#dapviewwatch-isnt-adding-the-whole-variable"><code>DapViewWatch</code> isn’t adding the whole variable</a></h2> <p>In normal mode, <code>:DapViewWatch</code> expands the <code>&lt;cexpr&gt;</code> under the cursor (see <code>:h &lt;cexpr&gt;</code>). By default, this setting works really well for C-like languages, but it can be cumbersome for other languages. To handle that, you can tweak the value for the <code>'iskeyword'</code> option (see <code>:h 'iskeyword'</code>). For instance, with PHP, you can use <code>set iskeyword+=$</code>.</p> <h2 id="how-to-control-which-window-will-be-used-when-jumping-to-a-breakpoint-or-a-call-in-the-stack"><a href="#how-to-control-which-window-will-be-used-when-jumping-to-a-breakpoint-or-a-call-in-the-stack">How to control which window will be used when jumping to a breakpoint or a call in the stack?</a></h2> <p><code>nvim-dap-view</code> ships its own <code>switchbuf</code> (see <code>:h 'switchbuf'</code>), which supports a subset of neovim’s built-in options: <code>newtab</code>, <code>useopen</code>, <code>usetab</code> and <code>uselast</code>. You can customize it with:</p> <!> <p>You can use a commas to define fallback behavior (e.g., <code>"useopen,newtab"</code> creates a new tab if the buffer is not found).</p> <h2 id="nvim-dap-is-overriding-one-of-the-nvim-dap-views-windows-on-stop"><a href="#nvim-dap-is-overriding-one-of-the-nvim-dap-views-windows-on-stop"><code>nvim-dap</code> is overriding one of the <code>nvim-dap-view</code>’s windows on stop</a></h2> <p>When <code>windows.terminal.position</code> is <code>right</code> the views window may be used to display the current frame, because <code>nvim-dap</code> has its own internal <code>switchbuf</code> setting (see <code>:h 'switchbuf'</code>), which defaults to the global <code>switchbuf</code> option.  A common solution is to set <code>nvim-dap</code>’s <code>switchbuf</code> to another value. For instance:</p> <!>`,1);function $(i,c){const l=u(c,["children","$$slots","$$events","$$legacy"]);m(i,f(()=>l,()=>t,{children:(p,v)=>{var o=y(),a=e(w(o),4);s(a,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#6C7086;font-style:italic">-- Your nvim-dap config</span></span>
<span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    &#123;</span></span>
<span class="line"><span style="color:#A6E3A1">        "mfussenegger/nvim-dap"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">        dependencies </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">            &#123; </span><span style="color:#A6E3A1">"igorlfs/nvim-dap-view"</span><span style="color:#CDD6F4">, opts </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;&#125; &#125;,</span></span>
<span class="line"><span style="color:#F38BA8">            ...</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">        &#125;,</span></span>
<span class="line"><span style="color:#F38BA8">        ...</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">    &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`);var n=e(a,10);s(n,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    switchbuf </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "useopen"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`);var d=e(n,8);s(d,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#6C7086;font-style:italic">-- Don't change focus if the window is visible, otherwise jump to the first window (from any tab) containing the buffer</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">-- If no window contains the buffer, create a new tab</span></span>
<span class="line"><span style="color:#89B4FA;font-style:italic">require</span><span style="color:#CDD6F4">(</span><span style="color:#A6E3A1">"dap"</span><span style="color:#CDD6F4">).defaults.fallback.switchbuf </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "usevisible,usetab,newtab" </span><span style="color:#6C7086;font-style:italic">-- See :h dap-defaults to learn more</span></span></code></pre>`),h(p,o)},$$slots:{default:!0}}))}export{$ as default,t as metadata};
