import{f as r,a as d}from"./GwPlNN1O.js";import"./CQk7nja8.js";import{s as e,f as h,n as y}from"./TIKN8jI6.js";import{h as o}from"./D-NLAHDH.js";import{l as u,s as f}from"./CSF376HR.js";import{M as m}from"./CPjOVohi.js";const n={title:"Basics",hidden:!0},{title:D,hidden:F}=n;var g=r('<p>Getting started with <code>nvim-dap</code> is easier than it sounds! This guide aims to explain all you need to know.</p> <p>First things first: what is the DAP? Much like the LSP, the DAP is a protocol created to solve a scalability problem: it used to be the case that each text editor had to have a custom integration for each debugger they wanted to support. That means handling the communication was a nightmare: each debugger has its own way of defining breakpoints, or evaluating expressions and whatnot. What DAP brings to the table is a standardization for this communication, massively simplifying the implementation.</p> <p>To accomplish its goal, the DAP introduces the concept of <strong>debug adapters</strong>: programs that make debuggers comply with the protocol (in fact, many debuggers actually support the protocol natively, such as <code>gdb</code>). The first step (after installing the plugin) to setup <code>nvim-dap</code> is choosing an adapter, which will depend on the language you‚Äôre using. You can install an adapter with your system‚Äôs package manager (or, most likely, using <a href="https://github.com/mason-org/mason.nvim" rel="nofollow">mason.nvim</a>). To give some concrete examples, this guides picks <code>codelldb</code>: <a href="https://github.com/vadimcn/codelldb" rel="nofollow">a powerful adapter</a> which can be used for C, C++ and Rust. Under the hood, <code>codelldb</code> (the adapter) uses <code>lldb</code> (the debugger). To configure <code>codelldb</code> (or any adapter, for that matter) refer to <code>nvim-dap</code>‚Äôs <a href="https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation" rel="nofollow">wiki</a>. There, we can find a <a href="https://codeberg.org/mfussenegger/nvim-dap/wiki/C-C---Rust-(via--codelldb)#1-11-0-and-later" rel="nofollow">snippet</a> to define <code>codelldb</code>:</p> <!> <p>Fantastic! Now we have to define a way for the adapter to actually connect with the code we‚Äôre trying to debug. That‚Äôs what‚Äôs known as a ‚Äúconfiguration‚Äù. <code>nvim-dap</code> offers it‚Äôs own way of defining configurations, but my recommendation is to use a <code>.vscode/launch.json</code> file, which <code>nvim-dap</code> supports natively, out of the box. The main advantage of this approach is that your colleagues will be able to use the configuration as well!</p> <p>The configuration, however, can be a bit tricky. There are some base options, but most adapters introduce their own flags. Again, you can use the <code>nvim-dap</code> <a href="https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation" rel="nofollow">wiki</a> as reference, but you may need to also check your adapter‚Äôs documentation as well. Here‚Äôs a basic configuration to launch a C++ program using <code>codelldb</code>:</p> <!> <p>Great! The tricky part is over! Now all you have to do is configure <code>nvim-dap</code> like any other plugin: get to know the commands and define some keybindings (take a look at <a href="https://github.com/igorlfs/dotfiles/blob/main/nvim/.config/nvim/lua/plugins/bare/nvim-dap.lua" rel="nofollow">my config</a> if you need inspiration). Refer to <code>:h dap-user-commands</code> to learn what you can do.</p> <p>The last step is to test your setup. Remember to compile your program with debug symbols if necessary<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>. Create a breakpoint with <code>:DapToggleBreakpoint</code> (or using your custom keymap) and then start a debugging session with <code>:DapContinue</code>. If all goes well, the execution will be stopped when hitting the line with the breakpoint.</p> <p>Hooray! Now you can start tweaking <code>nvim-dap-view</code>! üéâ</p> <div class="footnotes"><hr/> <ol><li id="fn-1">The path of the binary with debug symbols must match the path of the <code>program</code> defined in the configuration.<a href="#fnref-1" class="footnote-backref">‚Ü©</a></li></ol></div>',1);function T(t,l){const p=u(l,["children","$$slots","$$events","$$legacy"]);m(t,f(()=>p,n,{children:(i,b)=>{var a=g(),s=e(h(a),6);o(s,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#89B4FA;font-style:italic">require</span><span style="color:#CDD6F4">(</span><span style="color:#A6E3A1">"dap"</span><span style="color:#CDD6F4">).adapters.codelldb </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    type </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "executable"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">    command </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "codelldb"</span><span style="color:#CDD6F4">, </span><span style="color:#6C7086;font-style:italic">-- or if not in $PATH: "/absolute/path/to/codelldb"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6C7086;font-style:italic">    -- On windows you may have to uncomment this:</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">    -- detached = false,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`);var c=e(s,6);o(c,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#9399B2">&#123;</span></span>
<span class="line"><span style="color:#9399B2">    "</span><span style="color:#89B4FA">version</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#A6E3A1"> "0.2.0"</span><span style="color:#9399B2">,</span></span>
<span class="line"><span style="color:#9399B2">    "</span><span style="color:#89B4FA">configurations</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#9399B2"> [</span></span>
<span class="line"><span style="color:#9399B2">        &#123;</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            // Base options</span></span>
<span class="line"><span style="color:#9399B2">            "</span><span style="color:#89B4FA">name</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#A6E3A1"> "Launch My Cool Project"</span><span style="color:#9399B2">,</span><span style="color:#6C7086;font-style:italic">   // Actually not that important, could be anything</span></span>
<span class="line"><span style="color:#9399B2">            "</span><span style="color:#89B4FA">type</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#A6E3A1"> "codelldb"</span><span style="color:#9399B2">,</span><span style="color:#6C7086;font-style:italic">                 // Must match the adapter we defined earlier</span></span>
<span class="line"><span style="color:#9399B2">            "</span><span style="color:#89B4FA">request</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#A6E3A1"> "launch"</span><span style="color:#9399B2">,</span><span style="color:#6C7086;font-style:italic">                // Could be either launch or attach</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            // Adapter specific options</span></span>
<span class="line"><span style="color:#9399B2">            "</span><span style="color:#89B4FA">program</span><span style="color:#9399B2">"</span><span style="color:#9399B2">:</span><span style="color:#A6E3A1"> "$&#123;workspaceFolder&#125;/path/to/your/binary"</span><span style="color:#6C7086;font-style:italic"> // Path for the program that will be launched</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            // In spite of not being a base option, "program" is fairly common for launch requests</span></span>
<span class="line"><span style="color:#9399B2">        &#125;</span></span>
<span class="line"><span style="color:#9399B2">    ]</span></span>
<span class="line"><span style="color:#9399B2">&#125;</span></span></code></pre>`),y(8),d(i,a)},$$slots:{default:!0}}))}export{T as default,n as metadata};
