import{f as r,a as d}from"./BOSS2eSP.js";import"./BpA-tlIA.js";import{s as n,f as y}from"./CCWUXxDr.js";import{h as o}from"./BWvQED8v.js";import{l as h,s as D}from"./CqfYOgax.js";import{M as f}from"./DAo9CjnF.js";const e={title:"Hide Terminal",category:"Recipes"},{title:b,category:B}=e;var m=r('<p>Some debug adapters don’t use the integrated terminal (console). To avoid having a completely useless window lying around, you can hide the terminal for them. To achieve that, add the following snippet to your <code>nvim-dap-view</code> setup:</p> <!> <h2 id="anchoring"><a href="#anchoring">Anchoring</a></h2> <p>In some scenarios, it’s useful to use another window as if it was <code>nvim-dap-view</code>’s terminal. One such scenario is when using the <code>delve</code> adapter for Go (more specifically, coupled with an <code>attach</code> request): the window with the terminal that launched <code>dlv</code> can act as if it was the <code>nvim-dap-view</code>’s terminal window. By doing that, <code>nvim-dap-view</code>’s main window will “follow” <code>delve</code>’s window (i.e., <code>nvim-dap-view</code>’s main window will open by the side of <code>delve</code>’s window). Watch this <a href="https://github.com/user-attachments/assets/5dce4b3d-fc01-4be6-9a72-b0f969e34b14" rel="nofollow">video</a> for context.</p> <p>To achieve that, in addition to hidding the terminal for <code>delve</code> (see above), you have to create your own <code>anchor</code> function that returns a window number (or <code>nil</code>). If <code>nil</code> is returned, there’s a fallback to the default behavior. Here’s a simple function you can use:</p> <!>',1);function _(l,p){const t=h(p,["children","$$slots","$$events","$$legacy"]);f(l,D(()=>t,()=>e,{children:(c,w)=>{var s=m(),a=n(y(s),2);o(a,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    windows </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">        terminal </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            -- Use the actual names for the adapters you want to hide</span></span>
<span class="line"><span style="color:#CDD6F4">            hide </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123; </span><span style="color:#A6E3A1">"go" </span><span style="color:#CDD6F4">&#125;, </span><span style="color:#6C7086;font-style:italic">-- &#96;go&#96; is known to not use the terminal.</span></span>
<span class="line"><span style="color:#CDD6F4">        &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">    &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`);var i=n(a,8);o(i,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    windows </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#89B4FA;font-style:italic">        anchor</span><span style="color:#94E2D5"> =</span><span style="color:#CBA6F7"> function</span><span style="color:#9399B2">()</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            -- Anchor to the first terminal window found in the current tab</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            -- Tweak according to your needs</span></span>
<span class="line"><span style="color:#CBA6F7">            local</span><span style="color:#CDD6F4"> windows </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> vim.api.</span><span style="color:#89B4FA;font-style:italic">nvim_tabpage_list_wins</span><span style="color:#CDD6F4">(</span><span style="color:#FAB387">0</span><span style="color:#CDD6F4">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CBA6F7">            for</span><span style="color:#CDD6F4"> _, win </span><span style="color:#CBA6F7">in</span><span style="color:#89B4FA;font-style:italic"> ipairs</span><span style="color:#CDD6F4">(windows) </span><span style="color:#CBA6F7">do</span></span>
<span class="line"><span style="color:#CBA6F7">                local</span><span style="color:#CDD6F4"> bufnr </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> vim.api.</span><span style="color:#89B4FA;font-style:italic">nvim_win_get_buf</span><span style="color:#CDD6F4">(win)</span></span>
<span class="line"><span style="color:#CBA6F7">                if</span><span style="color:#CDD6F4"> vim.bo[bufnr].buftype </span><span style="color:#94E2D5">==</span><span style="color:#A6E3A1"> "terminal" </span><span style="color:#CBA6F7">then</span></span>
<span class="line"><span style="color:#CBA6F7">                    return</span><span style="color:#CDD6F4"> win</span></span>
<span class="line"><span style="color:#CBA6F7">                end</span></span>
<span class="line"><span style="color:#CBA6F7">            end</span></span>
<span class="line"><span style="color:#CBA6F7">        end</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">    &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`),d(c,s)},$$slots:{default:!0}}))}export{_ as default,e as metadata};
