import{t as r,a as n}from"./Dic1KHAO.js";import"./DD6pV2wQ.js";import{n as l}from"./Bg0Y8X25.js";import{l as u,s as m}from"./BVYR4rSG.js";import{M as p}from"./BXqSqzQW.js";const e={title:"Using Neovim as a terminal multiplexer",description:"Forget about tmux! Learn about neovim's builtin terminal",date:"2024-08-14",categories:["neovim","software"],published:!0},{title:b,description:v,date:x,categories:$,published:_}=e;var h=r('<p>In a world where all the cool kids are using a terminal multiplexer, you can be even cooler by using neovim’s builtin <code>:terminal</code>. If you’re really confortable with your current setup (whatever it may be), this post is definitely not for you. But if you’re trying out a multiplexer (or another alternative[^1]) and you’re just not feeling it, this guide might be what you’re looking for.</p> <p>And while post is specifically about neovim, I have no reason to believe the same logic wouldn’t apply to other text editors. Well, the <a href="https://github.com/helix-editor/helix/pull/4649" rel="nofollow">ones</a> with an integrated terminal, that is.</p> <p>Out of the box, neovim’s <code>:terminal</code> is really awkward, and this might be the reason some resort to tmux. For instance, to exit terminal mode, you have to…</p> <p>Managing windows and terminals is a messy subject. Besides aforementioned window manager’s and editor’s keymaps, some terminal emulators also provide tabs and <a href="https://wezfurlong.org/wezterm/multiplexing.html" rel="nofollow">multiplexing</a>, and vim also provides its own tabs! Of course, there isn’t a single perfect setup for everyone, and if you’re happy with your current approach, there’s little to gain from reading the remainder of this post. But if you’re feeling somewhat bothered with your setup, hop on in!</p> <p>I mentioned a drawback, but what about the advantages of multiplexers? There are some legit use cases, of course. If you’re using the tty or sshing into a server, a multiplexer sounds like the way to go! But I don’t deal with either of these very often. Multiplexers also provide persistent sessions, but in time we’ll talk about sessions. The main use case is to split terminals</p> <h2 id="but-but-what-about-my-sessions"><a href="#but-but-what-about-my-sessions">But.. But what about my sessions?</a></h2> <p>[^1]: <a href="https://wezfurlong.org/wezterm/multiplexing.html" rel="nofollow">Some terminal emulators</a> also offer multiplexing.</p>',1);function k(t,o){const i=u(o,["children","$$slots","$$events","$$legacy"]);p(t,m(()=>i,e,{children:(s,d)=>{var a=h();l(12),n(s,a)},$$slots:{default:!0}}))}export{k as default,e as metadata};
