import"./Bzak7iHL.js";import"./BnYp5M1u.js";import{f as i,s as n,b as y,a as D}from"./BCdYson3.js";import{h as o}from"./BngIArCa.js";import{l as d,s as u}from"./DrqgEYiV.js";import{M as f}from"./BQcrJoSf.js";const l={title:"Custom Views",category:"Recipes"},{title:v,category:_}=l;var m=i('<p>You can write your own views. If you are a plugin author, this allows you to embed your plugin into <code>nvim-dap-view</code>. If you are a regular user and you are missing a view, consider making a <a href="https://github.com/igorlfs/nvim-dap-view/issues/new?template=feature_request.yml" rel="nofollow">feature request</a> instead of writing your own implementation.</p> <p>Writing a custom view is similar to writing a <a href="control-bar#custom-buttons">custom button</a>. A view consists of an ID and 6 fields:</p> <ol><li>A <code>label</code>, the string that will show up in the user’s winbar</li> <li>A <code>short_label</code>, which is used when there’s not enough space to display the whole winbar</li> <li>An <code>action</code> function to render the component</li> <li>A <code>keymap</code>, which will trigger the action</li> <li>A <code>buffer</code> function that will create a new buffer and return its <code>bufnr</code></li> <li>A <code>filetype</code>, which is the filetype of the buffer</li></ol> <p>The logic after the action is triggered is <strong>not</strong> handled by <code>nvim-dap-view</code>.</p> <h2 id="example"><a href="#example">Example</a></h2> <p>A bare bones view would consist of:</p> <!> <p>To add a custom view to your config, you just add it to the sections table as if it was a regular view:</p> <!>',1);function E(e,p){const t=d(p,["children","$$slots","$$events","$$legacy"]);f(e,u(()=>t,()=>l,{children:(c,F)=>{var s=m(),a=n(y(s),12);o(a,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    winbar </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">        custom_sections </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">            my_new_view </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123; </span><span style="color:#6C7086;font-style:italic">-- the ID</span></span>
<span class="line"><span style="color:#CDD6F4">                label </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "My new view"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">                short_label </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "mnv"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#89B4FA;font-style:italic">                action</span><span style="color:#94E2D5"> =</span><span style="color:#CBA6F7"> function</span><span style="color:#9399B2">()</span></span>
<span class="line"><span style="color:#CDD6F4">                    vim.</span><span style="color:#89B4FA;font-style:italic">print</span><span style="color:#CDD6F4">(</span><span style="color:#A6E3A1">"Hi from view"</span><span style="color:#CDD6F4">)</span></span>
<span class="line"><span style="color:#CBA6F7">                end</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">                keymap </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "M"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#89B4FA;font-style:italic">                buffer</span><span style="color:#94E2D5"> =</span><span style="color:#CBA6F7"> function</span><span style="color:#9399B2">()</span></span>
<span class="line"><span style="color:#CBA6F7">                    return</span><span style="color:#CDD6F4"> vim.api.</span><span style="color:#89B4FA;font-style:italic">nvim_create_buf</span><span style="color:#CDD6F4">(</span><span style="color:#F38BA8">true</span><span style="color:#CDD6F4">, </span><span style="color:#F38BA8">false</span><span style="color:#CDD6F4">)</span></span>
<span class="line"><span style="color:#CBA6F7">                end</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">                ft </span><span style="color:#94E2D5">=</span><span style="color:#A6E3A1"> "my-custom-ft"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4">            &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">        &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">    &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`);var r=n(a,4);o(r,()=>`<pre class="shiki catppuccin-mocha" style="background-color:#1e1e2e;color:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#CBA6F7">return</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">    winbar </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4">        sections </span><span style="color:#94E2D5">=</span><span style="color:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#A6E3A1">            "my_new_view"</span><span style="color:#CDD6F4">,</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic">            -- ...</span></span>
<span class="line"><span style="color:#CDD6F4">        &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">    &#125;,</span></span>
<span class="line"><span style="color:#CDD6F4">&#125;</span></span></code></pre>`),D(c,s)},$$slots:{default:!0}}))}export{E as default,l as metadata};
