import{t,a as p}from"./BLxlZUrJ.js";import"./CFq3jESr.js";import{n as c}from"./eUeLa1OZ.js";import{l as w,s as h}from"./BNd-5Pst.js";import{M as n}from"./oFaaERDc.js";const e={title:"Commands"},{title:D}=e;var r=t('<p>Commands offer the same functionality as the <a href="api">API</a>.</p> <h2 id="dapviewopen"><a href="#dapviewopen"><code>DapViewOpen</code></a></h2> <p>Opens both <code>nvim-dap-view</code> windows: views + console.</p> <h2 id="dapviewclose"><a href="#dapviewclose"><code>DapViewClose</code></a></h2> <p>Closes the views window. Accepts a bang (i.e., <code>DapViewClose!</code>) to also hide the terminal window.</p> <h2 id="dapviewtoggle"><a href="#dapviewtoggle"><code>DapViewToggle</code></a></h2> <p>Behaves like <code>DapViewOpen</code> if thereâ€™s no views window. Else behaves like <code>DapViewClose</code> (also accepts a bang to behave like <code>DapViewClose!</code>).</p> <h2 id="dapviewwatch"><a href="#dapviewwatch"><code>DapViewWatch</code></a></h2> <p>In normal mode, adds the expression under the cursor to the watch list (see <a href="faq#dapviewwatch-isnt-adding-the-whole-variable">caveats</a>). In visual mode, adds the selection to the watch list. Also accepts adding an expression directly (i.e., <code>:DapViewWatch foo + bar</code>), which takes precedence.</p> <h2 id="dapviewjump-view"><a href="#dapviewjump-view"><code>DapViewJump [view]</code></a></h2> <p>Shows a given view and jumps to its window. For instance, to jump to the REPL, you can use <code>:DapViewJump repl</code>.</p> <h2 id="dapviewshow-view"><a href="#dapviewshow-view"><code>DapViewShow [view]</code></a></h2> <p>Shows a given view. If the specified view is already the current one, jumps to its window.</p>',1);function V(a,o){const i=w(o,["children","$$slots","$$events","$$legacy"]);n(a,h(()=>i,e,{children:(d,l)=>{var s=r();c(24),p(d,s)},$$slots:{default:!0}}))}export{V as default,e as metadata};
