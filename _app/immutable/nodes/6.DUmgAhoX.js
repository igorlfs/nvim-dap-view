import"../chunks/CWj6FrbW.js";import"../chunks/DbU67bsD.js";import{h as _e,i as Ae,s as e,j as t,l as i,t as r,n as a,k as o}from"../chunks/BB2ayv6H.js";import{P as De,C as te}from"../chunks/VioDPivU.js";import"../chunks/D6aIC5lT.js";import{L as l}from"../chunks/5SccCE-s.js";var xe=_e(`<p>Getting started with <code></code> is easier than it sounds! This guide aims to explain all you need to know.</p> <div id="What-is-the-Debug-Adapter-Protocol-" class="svp-anchor-item"></div> <h2><a href="#What-is-the-Debug-Adapter-Protocol-" class="svp-title-anchor" aria-label="What is the Debug Adapter Protocol?"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 512 512"><path d="M280 341.1l-1.2.1c-3.6.4-7 2-9.6 4.5l-64.6 64.6c-13.7 13.7-32 21.2-51.5 21.2s-37.8-7.5-51.5-21.2c-13.7-13.7-21.2-32-21.2-51.5s7.5-37.8 21.2-51.5l68.6-68.6c3.5-3.5 7.3-6.6 11.4-9.3 4.6-3 9.6-5.6 14.8-7.5 4.8-1.8 9.9-3 15-3.7 3.4-.5 6.9-.7 10.2-.7 1.4 0 2.8.1 4.6.2 17.7 1.1 34.4 8.6 46.8 21 7.7 7.7 13.6 17.1 17.1 27.3 2.8 8 11.2 12.5 19.3 10.1.1 0 .2-.1.3-.1.1 0 .2 0 .2-.1 8.1-2.5 12.8-11 10.5-19.1-4.4-15.6-12.2-28.7-24.6-41-15.6-15.6-35.9-25.8-57.6-29.3-1.9-.3-3.8-.6-5.7-.8-3.7-.4-7.4-.6-11.1-.6-2.6 0-5.2.1-7.7.3-5.4.4-10.8 1.2-16.2 2.5-1.1.2-2.1.5-3.2.8-6.7 1.8-13.3 4.2-19.5 7.3-10.3 5.1-19.6 11.7-27.7 19.9l-68.6 68.6C58.9 304.4 48 330.8 48 359c0 28.2 10.9 54.6 30.7 74.4C98.5 453.1 124.9 464 153 464c28.2 0 54.6-10.9 74.4-30.7l65.3-65.3c10.4-10.5 2-28.3-12.7-26.9z" fill="currentColor"></path><path d="M433.3 78.7C413.5 58.9 387.1 48 359 48s-54.6 10.9-74.4 30.7l-63.7 63.7c-9.7 9.7-3.6 26.3 10.1 27.4 4.7.4 9.3-1.3 12.7-4.6l63.8-63.6c13.7-13.7 32-21.2 51.5-21.2s37.8 7.5 51.5 21.2c13.7 13.7 21.2 32 21.2 51.5s-7.5 37.8-21.2 51.5l-68.6 68.6c-3.5 3.5-7.3 6.6-11.4 9.3-4.6 3-9.6 5.6-14.8 7.5-4.8 1.8-9.9 3-15 3.7-3.4.5-6.9.7-10.2.7-1.4 0-2.9-.1-4.6-.2-17.7-1.1-34.4-8.6-46.8-21-7.3-7.3-12.8-16-16.4-25.5-2.9-7.7-11.1-11.9-19.1-9.8-8.9 2.3-14.1 11.7-11.3 20.5 4.5 14 12.1 25.9 23.7 37.5l.2.2c16.9 16.9 39.4 27.6 63.3 30.1 3.7.4 7.4.6 11.1.6 2.6 0 5.2-.1 7.8-.3 6.5-.5 13-1.6 19.3-3.2 6.7-1.8 13.3-4.2 19.5-7.3 10.3-5.1 19.6-11.7 27.7-19.9l68.6-68.6c19.8-19.8 30.7-46.2 30.7-74.4s-11.1-54.6-30.9-74.4z" fill="currentColor"></path></svg></a>What is the Debug Adapter Protocol?</h2> <p>If you already know what is the Language Server Protocol (LSP), the Debug Adapter Protocol is just one step ahead: it's the same concept, but applied to debugging. If you're not sure if you get the hang of the Language Server Protocol, I recommend watching this <!> by <!>.</p> <p>Much like the LSP, the DAP is a protocol created to solve a scalability problem: before the protocol, each text editor had to have a custom integration for each debugger they wanted to support. That means handling the communication between the editor and the debuggers was essentially a <em>nightmare</em>: each debugger has its own way of defining breakpoints, evaluating expressions, navigating the stack and whatnot. What DAP brings to the table is a <strong>standardization for this communication which massively simplifies the implementation</strong>.</p> <p>To accomplish its goal, the DAP introduces the concept of <strong>debug adapters</strong>: programs that make <em>debuggers</em> comply with the protocol's communication standards. It's important to have this distinction clear: a <em>debugger</em> and a debug adapter are <em>distinct programs</em>. All throughout <code></code>'s you'll the see the term <em>adapter</em>, referring to a <em>debug adapter</em>, but there are only a couple or so mentions of <em>debuggers</em>, since the protocol is about <em>adapters</em>.</p> <p>To make matters a little more confusing, some debuggers implement the protocol natively, meaning that they do not rely on an external adapter. One such example is <code></code>: from version 14.0 onwards, it ships with a flag that allows communication via DAP. Previously, to use the <code></code> debugger via DAP, you'd have to install a custom adapter, such as the one <!> with the VS Code C++ extension.</p> <div id="Basic-Configuration" class="svp-anchor-item"></div> <h2><a href="#Basic-Configuration" class="svp-title-anchor" aria-label="Basic Configuration"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 512 512"><path d="M280 341.1l-1.2.1c-3.6.4-7 2-9.6 4.5l-64.6 64.6c-13.7 13.7-32 21.2-51.5 21.2s-37.8-7.5-51.5-21.2c-13.7-13.7-21.2-32-21.2-51.5s7.5-37.8 21.2-51.5l68.6-68.6c3.5-3.5 7.3-6.6 11.4-9.3 4.6-3 9.6-5.6 14.8-7.5 4.8-1.8 9.9-3 15-3.7 3.4-.5 6.9-.7 10.2-.7 1.4 0 2.8.1 4.6.2 17.7 1.1 34.4 8.6 46.8 21 7.7 7.7 13.6 17.1 17.1 27.3 2.8 8 11.2 12.5 19.3 10.1.1 0 .2-.1.3-.1.1 0 .2 0 .2-.1 8.1-2.5 12.8-11 10.5-19.1-4.4-15.6-12.2-28.7-24.6-41-15.6-15.6-35.9-25.8-57.6-29.3-1.9-.3-3.8-.6-5.7-.8-3.7-.4-7.4-.6-11.1-.6-2.6 0-5.2.1-7.7.3-5.4.4-10.8 1.2-16.2 2.5-1.1.2-2.1.5-3.2.8-6.7 1.8-13.3 4.2-19.5 7.3-10.3 5.1-19.6 11.7-27.7 19.9l-68.6 68.6C58.9 304.4 48 330.8 48 359c0 28.2 10.9 54.6 30.7 74.4C98.5 453.1 124.9 464 153 464c28.2 0 54.6-10.9 74.4-30.7l65.3-65.3c10.4-10.5 2-28.3-12.7-26.9z" fill="currentColor"></path><path d="M433.3 78.7C413.5 58.9 387.1 48 359 48s-54.6 10.9-74.4 30.7l-63.7 63.7c-9.7 9.7-3.6 26.3 10.1 27.4 4.7.4 9.3-1.3 12.7-4.6l63.8-63.6c13.7-13.7 32-21.2 51.5-21.2s37.8 7.5 51.5 21.2c13.7 13.7 21.2 32 21.2 51.5s-7.5 37.8-21.2 51.5l-68.6 68.6c-3.5 3.5-7.3 6.6-11.4 9.3-4.6 3-9.6 5.6-14.8 7.5-4.8 1.8-9.9 3-15 3.7-3.4.5-6.9.7-10.2.7-1.4 0-2.9-.1-4.6-.2-17.7-1.1-34.4-8.6-46.8-21-7.3-7.3-12.8-16-16.4-25.5-2.9-7.7-11.1-11.9-19.1-9.8-8.9 2.3-14.1 11.7-11.3 20.5 4.5 14 12.1 25.9 23.7 37.5l.2.2c16.9 16.9 39.4 27.6 63.3 30.1 3.7.4 7.4.6 11.1.6 2.6 0 5.2-.1 7.8-.3 6.5-.5 13-1.6 19.3-3.2 6.7-1.8 13.3-4.2 19.5-7.3 10.3-5.1 19.6-11.7 27.7-19.9l68.6-68.6c19.8-19.8 30.7-46.2 30.7-74.4s-11.1-54.6-30.9-74.4z" fill="currentColor"></path></svg></a>Basic Configuration</h2> <p>Neovim currently does not support the Debug Adapter Protocol natively (although it bundles a package for debugging<sup><a href="#user-content-fn-1" id="user-content-fnref-1" data-footnote-ref="" aria-describedby="footnote-label">1</a></sup>). The <em>de facto</em> implementation is a plugin called <!>.</p> <p>To get started with the configuration, you first have to install <code></code>, similarly to how you install other plugins. If you're not familiar with the installation of plugins, you can take a peek at <!> to get basics of configuring Neovim.</p> <p>The DAP configuration is essentially two fold: you first <em>define</em> an adapter and then set a <em>configuration</em> to interact with the program you're trying to debug. <em>Defining</em> an adapter tells <code></code> how to interact with the adapter (and therefore has nothing to do with your code). You'll <strong>define the adapter only once</strong>, but you may have multiple <em>configurations</em> for an adapter, depending on your needs.</p> <p>Most languages have, at most, a single adapter, so there's not a lot of decision here. You can install an adapter with your system's package manager or using <!>.</p> <p>To give a concrete example, this guides uses <!>: a powerful adapter which can be used for C, C++ and Rust<sup><a href="#user-content-fn-2" id="user-content-fnref-2" data-footnote-ref="" aria-describedby="footnote-label">2</a></sup>. Under the hood, <code></code> (the adapter) uses <code></code> (the debugger). To <strong>define</strong> <code></code> (or any adapter, for that matter) refer to <code></code>'s <!>. There, we can find the following <!>:</p> <div class="svp-code-block-wrapper"><div class="svp-code-block"><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha" style="background-color:#1e1e2e;--shiki-dark-bg:#1e1e2e;color:#cdd6f4;--shiki-dark:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#89B4FA;font-style:italic;--shiki-dark:#89B4FA;--shiki-dark-font-style:italic">require</span><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">(</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1">"dap"</span><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">).adapters.codelldb </span><span style="color:#94E2D5;--shiki-dark:#94E2D5">=</span><span style="color:#CDD6F4;--shiki-dark:#CDD6F4"> &#123;</span></span>
<span class="line"><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">    type </span><span style="color:#94E2D5;--shiki-dark:#94E2D5">=</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "executable"</span><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">,</span></span>
<span class="line"><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">    command </span><span style="color:#94E2D5;--shiki-dark:#94E2D5">=</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "codelldb"</span><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">, </span><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">-- or if not in $PATH: "/absolute/path/to/codelldb"</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">    -- On windows you may have to uncomment this:</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">    -- detached = false,</span></span>
<span class="line"><span style="color:#CDD6F4;--shiki-dark:#CDD6F4">&#125;</span></span></code></pre> <div class="svp-code-block--lang">lua</div> <!></div></div> <p>Fantastic! Now we have to define a way for the adapter to actually connect with the code we're trying to debug. Which is also known as the "configuration". The naming here unfortunately sucks, since... You have to <em>configure</em> everything, including stuff that isn't the "configuration" itself. But I digress.</p> <p><code></code> offers it's own way of defining configurations, but my recommendation is using a <code></code> file, which <code></code> supports natively, out of the box. The main advantage of this approach is that your colleagues will be able to use the configuration as well! What you may consider a disadvantage here is the fact that you'd have copy and paste the same file in multiple locations.</p> <p>The configuration itself can be a bit tricky. There are some base options, but most adapters introduce their own flags. Again, you can use the <code></code>'s <!> as a reference, but you may need to also check your adapter's documentation as well. Here's a basic <code></code> to <strong>launch</strong> a C++ program using <code></code>:</p> <div class="svp-code-block-wrapper"><div class="svp-code-block"><pre class="shiki shiki-themes catppuccin-mocha catppuccin-mocha" style="background-color:#1e1e2e;--shiki-dark-bg:#1e1e2e;color:#cdd6f4;--shiki-dark:#cdd6f4" tabindex="0"><code><span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">&#123;</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">    "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">version</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "0.2.0"</span><span style="color:#9399B2;--shiki-dark:#9399B2">,</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">    "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">configurations</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#9399B2;--shiki-dark:#9399B2"> [</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">        &#123;</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">            // Base options</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">            "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">name</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "Launch My Cool Project"</span><span style="color:#9399B2;--shiki-dark:#9399B2">,</span><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">   // Actually not that important, could be anything</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">            "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">type</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "codelldb"</span><span style="color:#9399B2;--shiki-dark:#9399B2">,</span><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">                 // Must match the adapter we defined earlier</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">            "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">request</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "launch"</span><span style="color:#9399B2;--shiki-dark:#9399B2">,</span><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">                // Could be either launch or attach</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">            // Adapter specific options</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">            "</span><span style="color:#89B4FA;--shiki-dark:#89B4FA">program</span><span style="color:#9399B2;--shiki-dark:#9399B2">"</span><span style="color:#9399B2;--shiki-dark:#9399B2">:</span><span style="color:#A6E3A1;--shiki-dark:#A6E3A1"> "$&#123;workspaceFolder&#125;/path/to/your/binary"</span><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic"> // Path for the program that will be launched</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">            // In spite of not being a base option, "program" is fairly common for launch requests</span></span>
<span class="line"><span style="color:#6C7086;font-style:italic;--shiki-dark:#6C7086;--shiki-dark-font-style:italic">            // '$&#123;workspaceFolder&#125;' is a VSCode like variable that nvim-dap automatically resolves</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">        &#125;</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">    ]</span></span>
<span class="line"><span style="color:#9399B2;--shiki-dark:#9399B2">&#125;</span></span></code></pre> <div class="svp-code-block--lang">jsonc</div> <!></div></div> <p>Great! The tricky part is over! Now all you have to do is configure <code></code> like any other plugin<sup><a href="#user-content-fn-3" id="user-content-fnref-3" data-footnote-ref="" aria-describedby="footnote-label">3</a></sup>: get to know the commands and define some keybindings (take a look at <!> if you need inspiration). I recommend using the <code></code> keys to create the bindings. Refer to <code></code> to learn what you can do. A bare bones setup would include at least a mapping to <code></code> and <code></code>.</p> <p>The last step is to test your setup. Remember to compile your program with debug symbols if necessary. To start a basic session, <strong>add a breakpoint</strong>. It's important to define a breakpoint beforehand, to not have the program finish executing before you're able to add one. You can then use <code></code> (or your own mapping) to create the session. If all goes well, the execution will be stopped when hitting the line with the breakpoint.</p> <p>Hooray! Now you can start tweaking <code></code>! 🎉</p> <section data-footnotes="" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2> <ol><li id="user-content-fn-1"><p>See <code></code> <a href="#user-content-fnref-1" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p></li> <li id="user-content-fn-2"><p>And other low level languages. Do notice that there isn't a 1:1 mapping between adapters and neovim's filetypes. <a href="#user-content-fnref-2" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p></li> <li id="user-content-fn-3"><p>It's worth noting that <code></code> does adhere to the <code></code> function "convention". <a href="#user-content-fnref-3" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p></li></ol></section>`,1);function Le(oe){const se={pageType:"md",lastUpdate:"2025/09/29 00:38:14",anchors:[{slugId:"What-is-the-Debug-Adapter-Protocol-",title:"What is the Debug Adapter Protocol?",depth:2},{slugId:"Basic-Configuration",title:"Basic Configuration",depth:2}],title:"Basics"};De(oe,{get fm(){return se},children:(ne,Re)=>{var x=xe(),d=Ae(x),ie=e(t(d));ie.textContent="nvim-dap",a(),o(d);var p=e(d,6),R=e(t(p));l(R,{to:"https://www.youtube.com/watch?v=LaS32vctfOY",labelRenderer:s=>{a();var n=r("video");i(s,n)},$$slots:{labelRenderer:!0}});var re=e(R,2);l(re,{to:"https://github.com/tjdevries",labelRenderer:s=>{a();var n=r("TJ");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(p);var h=e(p,4),le=e(t(h),9);le.textContent="nvim-dap-view",a(9),o(h);var u=e(h,2),F=e(t(u));F.textContent="gdb";var $=e(F,2);$.textContent="gdb";var ce=e($,2);l(ce,{to:"https://codeberg.org/mfussenegger/nvim-dap/wiki/C-C---Rust-(gdb-via--vscode-cpptools)",labelRenderer:s=>{a();var n=r("bundled");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(u);var k=e(u,6),de=e(t(k),5);l(de,{to:"https://github.com/mfussenegger/nvim-dap",labelRenderer:s=>{a();var n=r("nvim-dap");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(k);var g=e(k,2),P=e(t(g));P.textContent="nvim-dap";var pe=e(P,2);l(pe,{to:"https://github.com/nvim-lua/kickstart.nvim",labelRenderer:s=>{a();var n=r("quickstart.nvim");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(g);var m=e(g,2),he=e(t(m),7);he.textContent="nvim-dap",a(5),o(m);var f=e(m,2),ue=e(t(f));l(ue,{to:"https://github.com/mason-org/mason.nvim",labelRenderer:s=>{a();var n=r("mason.nvim");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(f);var v=e(f,2),E=e(t(v));l(E,{to:"https://github.com/vadimcn/codelldb",labelRenderer:s=>{a();var n=r("codelldb");i(s,n)},$$slots:{labelRenderer:!0}});var T=e(E,4);T.textContent="codelldb";var I=e(T,2);I.textContent="lldb";var L=e(I,4);L.textContent="codelldb";var W=e(L,2);W.textContent="nvim-dap";var M=e(W,2);l(M,{to:"https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation",labelRenderer:s=>{a();var n=r("wiki");i(s,n)},$$slots:{labelRenderer:!0}});var ke=e(M,2);l(ke,{to:"https://codeberg.org/mfussenegger/nvim-dap/wiki/C-C---Rust-(via--codelldb)#1-11-0-and-later",labelRenderer:s=>{a();var n=r("snippet");i(s,n)},$$slots:{labelRenderer:!0}}),a(),o(v);var y=e(v,2),S=t(y),ge=e(t(S),4);te(ge,{}),o(S),o(y);var b=e(y,4),j=t(b);j.textContent="nvim-dap";var z=e(j,2);z.textContent=".vscode/launch.json";var me=e(z,2);me.textContent="nvim-dap",a(),o(b);var C=e(b,2),N=e(t(C));N.textContent="nvim-dap";var Y=e(N,2);l(Y,{to:"https://codeberg.org/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation",labelRenderer:s=>{a();var n=r("wiki");i(s,n)},$$slots:{labelRenderer:!0}});var q=e(Y,2);q.textContent=".vscode/launch.json";var fe=e(q,4);fe.textContent="codelldb",a(),o(C);var w=e(C,2),H=t(w),ve=e(t(H),4);te(ve,{}),o(H),o(w);var B=e(w,2),O=e(t(B));O.textContent="nvim-dap";var G=e(O,4);l(G,{to:"https://github.com/igorlfs/dotfiles/blob/main/nvim/.config/nvim/lua/plugins/bare/nvim-dap.lua",labelRenderer:s=>{a();var n=r("my config");i(s,n)},$$slots:{labelRenderer:!0}});var U=e(G,2);U.textContent="<FX>";var V=e(U,2);V.textContent=":help dap-user-commands";var J=e(V,2);J.textContent=":DapToggleBreakpoint";var ye=e(J,2);ye.textContent=":DapContinue",a(),o(B);var _=e(B,2),be=e(t(_),3);be.textContent=":DapContinue",a(),o(_);var A=e(_,2),Ce=e(t(A));Ce.textContent="nvim-dap-view",a(),o(A);var X=e(A,2),K=e(t(X),2),D=t(K),Q=t(D),we=e(t(Q));we.textContent=":help package-termdebug",a(2),o(Q),o(D);var Z=e(D,4),ee=t(Z),ae=e(t(ee));ae.textContent="nvim-dap";var Be=e(ae,2);Be.textContent="setup",a(2),o(ee),o(Z),o(K),o(X),i(ne,x)},$$slots:{default:!0}})}export{Le as component};
