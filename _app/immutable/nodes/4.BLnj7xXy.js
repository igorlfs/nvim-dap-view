import"../chunks/CWj6FrbW.js";import"../chunks/DbU67bsD.js";import{h as $,i as I,s as e,j as t,l as P,n,k as o}from"../chunks/BB2ayv6H.js";import{P as A}from"../chunks/D-JS3k3V.js";import"../chunks/DvbhIGcp.js";import"../chunks/BL8cpBEd.js";var F=$("<p>You can tune the behavior of nvim-dap-view's jump to breakpoint and frame features, by using nvim-dap-view's own <code></code> config option. Similarly to the built-in option, you can combine different behaviors with a comma separated list. Available options include:</p> <ul><li><code></code>: always creates a new tab</li> <li><code></code>: tries to find the buffer to jump to <em>only</em> in the current tab</li> <li><code></code>: like <code></code>, but searches <em>every</em> tab (<strong>default</strong>)</li> <li><code></code>: jump to the previously used window, if eligible</li></ul> <p>For instance, with <code></code>, if the buffer is not found in the current tab, a new tab is created.</p> <p>For more advanced use cases, you can write your own <code></code> function. It receives 2 arguments: the <em>current</em> window number and the buffer number <em>to jump to</em>. It should (optionally) return a window number for the jump's destination window.</p> <p>If a combination of options does not yield a valid window number for the destination (e.g., <code></code> but the buffer is hidden), there's a fallback to create a top-level split.</p>",1);function z(v){const b={pageType:"md",lastUpdate:"2025/09/26 03:59:10",anchors:[],title:"Advanced 'switchbuf'",category:"Recipes"};A(v,{get fm(){return b},children:(h,L)=>{var l=F(),a=I(l),w=e(t(a));w.textContent="switchbuf",n(),o(a);var i=e(a,2),r=t(i),_=t(r);_.textContent="newtab",n(),o(r);var s=e(r,2),g=t(s);g.textContent="useopen",n(3),o(s);var d=e(s,2),p=t(d);p.textContent="usetab";var y=e(p,2);y.textContent="useopen",n(5),o(d);var m=e(d,2),x=t(m);x.textContent="uselast",n(),o(m),o(i);var c=e(i,2),C=e(t(c));C.textContent="useopen,newtab",n(),o(c);var u=e(c,2),j=e(t(u));j.textContent="switchbuf",n(5),o(u);var f=e(u,2),k=e(t(f));k.textContent="useopen",n(),o(f),P(h,l)},$$slots:{default:!0}})}export{z as component};
